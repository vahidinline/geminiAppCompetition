"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./examples/Configurator/index.js":
/*!****************************************!*\
  !*** ./examples/Configurator/index.js ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_github_btn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-github-btn */ \"./node_modules/react-github-btn/index.js\");\n/* harmony import */ var _components_MDBox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../components/MDBox */ \"./components/MDBox/index.js\");\n/* harmony import */ var _components_MDTypography__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../components/MDTypography */ \"./components/MDTypography/index.js\");\n/* harmony import */ var _components_MDButton__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../components/MDButton */ \"./components/MDButton/index.js\");\n/* harmony import */ var _examples_Configurator_ConfiguratorRoot__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../examples/Configurator/ConfiguratorRoot */ \"./examples/Configurator/ConfiguratorRoot.js\");\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../context */ \"./context/index.js\");\n/**\n=========================================================\n* NextJS Material Dashboard 2 PRO - v2.2.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/nextjs-material-dashboard-pro\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/ \nvar _s = $RefreshSig$();\n\n// react-github-btn\n\n// @mui material components\n\n\n\n\n\n// @mui icons\n\n\n// NextJS Material Dashboard 2 PRO components\n\n\n\n// Custom styles for the Configurator\n\n// NextJS Material Dashboard 2 PRO context\n\nfunction Configurator() {\n    _s();\n    const [controller, dispatch] = (0,_context__WEBPACK_IMPORTED_MODULE_7__.useMaterialUIController)();\n    const { openConfigurator, miniSidenav, fixedNavbar, sidenavColor, transparentSidenav, whiteSidenav, darkMode } = controller;\n    const [disabled, setDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const sidenavColors = [\n        \"primary\",\n        \"dark\",\n        \"info\",\n        \"success\",\n        \"warning\",\n        \"error\"\n    ];\n    // Use the useEffect hook to change the button state for the sidenav type based on window size.\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // A function that sets the disabled state of the buttons for the sidenav type.\n        function handleDisabled() {\n            return window.innerWidth > 1200 ? setDisabled(false) : setDisabled(true);\n        }\n        // The event listener that's calling the handleDisabled function when resizing the window.\n        window.addEventListener(\"resize\", handleDisabled);\n        // Call the handleDisabled function to set the state with the initial value.\n        handleDisabled();\n        // Remove event listener on cleanup\n        return ()=>window.removeEventListener(\"resize\", handleDisabled);\n    }, []);\n    const handleCloseConfigurator = ()=>(0,_context__WEBPACK_IMPORTED_MODULE_7__.setOpenConfigurator)(dispatch, false);\n    const handleTransparentSidenav = ()=>{\n        (0,_context__WEBPACK_IMPORTED_MODULE_7__.setTransparentSidenav)(dispatch, true);\n        (0,_context__WEBPACK_IMPORTED_MODULE_7__.setWhiteSidenav)(dispatch, false);\n    };\n    const handleWhiteSidenav = ()=>{\n        (0,_context__WEBPACK_IMPORTED_MODULE_7__.setWhiteSidenav)(dispatch, true);\n        (0,_context__WEBPACK_IMPORTED_MODULE_7__.setTransparentSidenav)(dispatch, false);\n    };\n    const handleDarkSidenav = ()=>{\n        (0,_context__WEBPACK_IMPORTED_MODULE_7__.setWhiteSidenav)(dispatch, false);\n        (0,_context__WEBPACK_IMPORTED_MODULE_7__.setTransparentSidenav)(dispatch, false);\n    };\n    const handleMiniSidenav = ()=>(0,_context__WEBPACK_IMPORTED_MODULE_7__.setMiniSidenav)(dispatch, !miniSidenav);\n    const handleFixedNavbar = ()=>(0,_context__WEBPACK_IMPORTED_MODULE_7__.setFixedNavbar)(dispatch, !fixedNavbar);\n    const handleDarkMode = ()=>(0,_context__WEBPACK_IMPORTED_MODULE_7__.setDarkMode)(dispatch, !darkMode);\n    // sidenav type buttons styles\n    const sidenavTypeButtonsStyles = (param)=>{\n        let { functions: { pxToRem }, palette: { white, dark, background }, borders: { borderWidth } } = param;\n        return {\n            height: pxToRem(39),\n            background: darkMode ? background.sidenav : white.main,\n            color: darkMode ? white.main : dark.main,\n            border: \"\".concat(borderWidth[1], \" solid \").concat(darkMode ? white.main : dark.main),\n            \"&:hover, &:focus, &:focus:not(:hover)\": {\n                background: darkMode ? background.sidenav : white.main,\n                color: darkMode ? white.main : dark.main,\n                border: \"\".concat(borderWidth[1], \" solid \").concat(darkMode ? white.main : dark.main)\n            }\n        };\n    };\n    // sidenav type active button styles\n    const sidenavTypeActiveButtonStyles = (param)=>{\n        let { functions: { pxToRem, linearGradient }, palette: { white, gradients, background } } = param;\n        return {\n            height: pxToRem(39),\n            background: darkMode ? white.main : linearGradient(gradients.dark.main, gradients.dark.state),\n            color: darkMode ? background.sidenav : white.main,\n            \"&:hover, &:focus, &:focus:not(:hover)\": {\n                background: darkMode ? white.main : linearGradient(gradients.dark.main, gradients.dark.state),\n                color: darkMode ? background.sidenav : white.main\n            }\n        };\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, void 0, false);\n}\n_s(Configurator, \"JtTT1e573DOdNcHfGU+qhN+zutU=\", false, function() {\n    return [\n        _context__WEBPACK_IMPORTED_MODULE_7__.useMaterialUIController\n    ];\n});\n_c = Configurator;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Configurator);\nvar _c;\n$RefreshReg$(_c, \"Configurator\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./examples/Configurator/index.js\n"));

/***/ })

});